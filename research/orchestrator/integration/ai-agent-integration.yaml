# Claude AI Integration Layer for Meta-Prompt Orchestrator
# AI INSTRUCTIONS: This file provides practical integration instructions for Claude to use the orchestrator
# FILE REFERENCES: Use these patterns for Claude to find orchestrator files

metadata:
  version: "1.0.0"
  last_updated: "2024-06-30"
  purpose: "Enable Claude to use YAML-based orchestrator system functionally"
  target: "Claude AI agents working with research framework"

# CLAUDE FILE REFERENCE PATTERNS
orchestrator_file_references:
  config_files:
    method_registry: "research/orchestrator/config/method-registry.yaml"
    selection_rules: "research/orchestrator/config/selection-rules.yaml"
    context_analyzer: "research/orchestrator/engines/context-analyzer.yaml"
  
  method_files:
    existing_methods: "research/orchestrator/methods/existing/"
    advanced_methods: "research/orchestrator/methods/advanced/"
    methods_index: "research/orchestrator/methods/methods-index.yaml"
  
  integration_files:
    workflow_orchestrator: "research/orchestrator/integration/workflow-orchestrator.yaml"
    claude_integration: "research/orchestrator/integration/claude-integration.yaml"
  
  claude_usage_notes:
    - "Use Read tool with these exact paths"
    - "Claude can access all files directly using file_path parameter"
    - "No @ prefixes needed for research/ folder - use direct paths"
    - "Files are organized for systematic orchestrator workflow"

# CLAUDE USAGE INSTRUCTIONS
claude_orchestrator_usage:
  when_to_use_orchestrator:
    research_tasks:
      - "Any research request from user"
      - "Creating new documents in @ai/knowledge/"
      - "Feature development workflows"
      - "Complex analysis or investigation tasks"
    
    triggers:
      - user_requests_research: "Always use orchestrator for method selection"
      - complex_analysis_needed: "Use orchestrator for method optimization"
      - quality_requirements_high: "Use orchestrator for quality enhancement"
      - unfamiliar_domain: "Use orchestrator for domain-appropriate methods"
  
  how_to_invoke_orchestrator:
    step_1_extract_context:
      action: "Parse user request to extract orchestrator input parameters"
      required_parameters:
        - research_topic: "Main subject of research from user request"
        - quality_requirements: "Infer from user language: basic/high/critical"
        - time_constraints: "Infer from user urgency: urgent/normal/extended/flexible"
      
      optional_parameters:
        - research_scope: "Determine from topic breadth: narrow/moderate/broad"
        - domain_specificity: "Assess domain needs: general/specialized/cross_domain"
        - stakeholder_level: "Infer from user expertise: general/professional/expert"
        - output_format: "Type of deliverable: report/presentation/documentation/analysis"
    
    step_2_run_context_analysis:
      reference_file: "research/orchestrator/engines/context-analyzer.yaml"
      process:
        complexity_assessment:
          - check_emerging_technology: "Look for AI, quantum, blockchain, etc."
          - check_multiple_domains: "Look for 'and', 'intersection', 'impact', etc."
          - check_ethical_implications: "Look for ethical, bias, privacy keywords"
          - apply_scoring_algorithm: "Use complexity_scoring from context-analyzer.yaml"
        
        domain_analysis:
          - map_to_domain_categories: "Use domain_mapping from context-analyzer.yaml"
          - determine_expertise_required: "Based on domain_specificity"
          - identify_context_patterns: "Match against context_patterns"
    
    step_3_select_methods:
      reference_file: "research/orchestrator/config/selection-rules.yaml"
      process:
        primary_method_selection:
          - use_complexity_mapping: "From selection-rules.yaml complexity_based"
          - consider_domain_preferences: "From context-analyzer.yaml domain_analysis_rules"
          - apply_selection_principles: "From selection-rules.yaml selection_principles"
        
        enhancement_selection:
          - add_quality_methods: "Based on quality_requirements from selection-rules.yaml"
          - check_compatibility: "Use compatibility_matrix from method-registry.yaml"
          - optimize_combination: "Apply combination_optimization algorithm"
    
    step_4_generate_execution_plan:
      execution_pattern:
        sequential: "When methods have dependencies or resource constraints"
        parallel: "When methods are independent and resources allow"
        hybrid: "For complex workflows with mixed dependencies"
      
      guidance_creation:
        preparation_steps: "Extract from selected method characteristics"
        execution_sequence: "Order methods based on pattern and dependencies"
        quality_checkpoints: "Based on validation_needs from quality analysis"
        success_metrics: "Derived from quality_requirements and context"

# PRACTICAL CLAUDE WORKFLOWS
claude_workflows:
  simple_research_workflow:
    user_request_example: "Research the impact of remote work on productivity"
    
    claude_process:
      - extract_context:
          research_topic: "impact of remote work on productivity"
          research_scope: "moderate"
          quality_requirements: "high"
          time_constraints: "normal"
          domain_specificity: "business"
      
      - run_analysis:
          complexity_assessment:
            level: "moderate"
            reasoning: "business domain, moderate scope, multiple stakeholder perspectives"
            confidence: 0.8
          domain_analysis:
            type: "specialized"
            expertise_required: "basic"
            domain_categories: ["business"]
      
      - select_methods:
          primary_methods: ["domain_adaptive"]
          enhancement_methods: ["constitutional_ai"]
          execution_pattern: "sequential"
          rationale: "Domain-specific business research with quality validation"
      
      - execute_with_orchestrator:
          step_1: "Apply domain_adaptive method from research/orchestrator/methods/existing/"
          step_2: "Apply constitutional_ai validation from research/orchestrator/methods/advanced/"
          quality_checkpoints: ["source_verification", "consistency_checks"]
  
  complex_research_workflow:
    user_request_example: "Analyze ethical implications of AGI on global economics"
    
    claude_process:
      - extract_context:
          research_topic: "ethical implications of AGI on global economics"
          research_scope: "broad"
          quality_requirements: "critical"
          time_constraints: "extended"
          domain_specificity: "cross_domain"
          stakeholder_level: "expert"
      
      - run_analysis:
          complexity_assessment:
            level: "complex"
            reasoning: "emerging technology, cross-domain, ethical implications"
            confidence: 0.9
          domain_analysis:
            type: "cross_domain"
            expertise_required: "expert"
            domain_categories: ["technology", "economics", "ethics"]
      
      - select_methods:
          primary_methods: ["multi_perspective_approach", "tree_of_thoughts"]
          enhancement_methods: ["constitutional_ai", "self_consistency"]
          execution_pattern: "hybrid"
          rationale: "Cross-domain analysis requires multiple perspectives with quality validation"
      
      - execute_with_orchestrator:
          phase_1_parallel: "multi_perspective_approach + tree_of_thoughts"
          phase_2_sequential: "constitutional_ai + self_consistency validation"
          quality_checkpoints: ["expert_validation", "source_verification", "consistency_checks"]

# CLAUDE DECISION TREES
claude_decision_trees:
  method_selection_decision_tree:
    context_complexity_simple:
      if: "complexity_level == 'simple'"
      then:
        time_urgent: "step_by_step_research"
        quality_focused: "primary_research + constitutional_ai"
        resource_limited: "universal_research"
        default: "universal_research"
    
    context_complexity_moderate:
      if: "complexity_level == 'moderate'"
      then:
        domain_general: "adaptive_chain_of_thought"
        domain_specialized: "domain_adaptive"
        decomposition_needed: "modular_task_decomposition"
        quality_high: "add constitutional_ai"
        default: "domain_adaptive"
    
    context_complexity_complex:
      if: "complexity_level == 'complex'"
      then:
        systematic_breakdown_needed: "complex_research"
        comprehensive_analysis_needed: "multi_perspective_approach"
        creative_exploration_needed: "tree_of_thoughts"
        maximum_quality_needed: "ensemble_methods"
        mandatory_quality: "always add constitutional_ai + self_consistency"
  
  execution_pattern_decision_tree:
    resource_assessment:
      computational_load_very_high: "hybrid"
      computational_load_high: "parallel"
      time_constraints_urgent: "sequential"
      quality_requirements_critical: "hybrid"
      method_dependencies_exist: "sequential"
      default: "sequential"

# INTEGRATION WITH EXISTING CLAUDE WORKFLOWS
existing_workflow_integration:
  document_creation_enhancement:
    before_orchestrator:
      process: "User requests document → Claude selects template → Generates content"
      limitations: "Static template selection, no method optimization"
    
    with_orchestrator:
      process: "User requests document → Orchestrator analyzes context → Selects optimal methods → Claude applies methods → Enhanced content generation"
      benefits: "Context-appropriate methods, quality optimization, systematic validation"
    
    implementation:
      step_1: "Run orchestrator analysis before selecting document template"
      step_2: "Use selected methods to enhance content generation process"
      step_3: "Apply quality checkpoints during document creation"
      step_4: "Use success metrics for validation"
  
  task_management_enhancement:
    before_orchestrator:
      process: "Task creation → Basic estimation → Standard tracking"
      limitations: "Generic estimates, no method-based planning"
    
    with_orchestrator:
      process: "Task creation → Orchestrator complexity analysis → Method-based subtasks → Enhanced estimation → Quality-based milestones"
      benefits: "Accurate estimates, method-appropriate subtasks, quality milestones"
    
    implementation:
      step_1: "Use orchestrator context analysis for task complexity assessment"
      step_2: "Create subtasks based on selected methods"
      step_3: "Set estimates using method characteristics"
      step_4: "Define milestones using quality checkpoints"

# CLAUDE OUTPUT FORMATTING
claude_output_templates:
  orchestrator_summary_template: |
    ## 🧠 Research Orchestrator Analysis
    
    **Context Analysis:**
    - Complexity: ${complexity_level} (${complexity_confidence} confidence)
    - Domain: ${domain_type} requiring ${expertise_required} expertise
    - Quality Target: ${quality_level} with ${validation_needs}
    
    **Selected Methods:**
    - Primary: ${primary_methods}
    - Enhancement: ${enhancement_methods}
    - Pattern: ${execution_pattern}
    
    **Execution Plan:**
    ${execution_sequence}
    
    **Quality Checkpoints:**
    ${quality_checkpoints}
    
    **Estimated Duration:** ${estimated_duration}
  
  method_application_template: |
    ## 📋 Applying ${method_name}
    
    **Method Context:** ${method_description}
    **Why Selected:** ${selection_rationale}
    **Expected Outcome:** ${expected_outcome}
    
    ${method_execution_content}
    
    **Quality Check:** ${quality_validation}
  
  orchestrator_adaptation_template: |
    ## 🔄 Orchestrator Adaptation
    
    **Trigger:** ${adaptation_trigger}
    **Analysis:** ${current_situation}
    **Adaptation:** ${adaptation_action}
    **New Plan:** ${updated_execution_plan}

# QUALITY ASSURANCE FOR CLAUDE
claude_quality_guidelines:
  orchestrator_validation:
    before_method_selection:
      - "Verify all required context parameters are extracted"
      - "Confirm complexity assessment reasoning is sound"
      - "Check domain analysis matches research topic"
    
    during_method_application:
      - "Follow method-specific instructions from research/orchestrator/methods/existing/"
      - "Apply enhancement methods as selected by orchestrator"
      - "Execute quality checkpoints at specified intervals"
    
    after_method_execution:
      - "Validate against success metrics from orchestrator"
      - "Check if adaptation triggers are met"
      - "Document orchestrator effectiveness for future improvement"
  
  common_mistakes_to_avoid:
    - "Don't skip context analysis - it drives all subsequent decisions"
    - "Don't ignore method compatibility - check compatibility_matrix"
    - "Don't override orchestrator recommendations without clear justification"
    - "Don't forget to apply enhancement methods - they ensure quality"
    - "Don't skip quality checkpoints - they catch issues early"

# SUCCESS METRICS FOR CLAUDE ORCHESTRATOR USAGE
claude_success_metrics:
  implementation_indicators:
    - "Claude consistently extracts context parameters correctly"
    - "Method selection aligns with orchestrator recommendations"
    - "Execution follows orchestrator guidance systematically"
    - "Quality improvements are measurable and consistent"
  
  quality_improvements:
    - "Research outputs show improved depth and accuracy"
    - "Method selection is appropriate for research context"
    - "Quality validation catches and corrects issues"
    - "User satisfaction with research quality increases"