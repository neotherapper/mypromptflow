# Claude AI Research Orchestrator Integration Layer
# AI INSTRUCTIONS: This file provides comprehensive integration instructions for Claude to use the research orchestrator
# FILE REFERENCES: Direct file paths for Claude to access orchestrator components

metadata:
  version: "3.0.0"
  last_updated: "2025-01-08"
  purpose: "Enable Claude to use YAML-based research orchestrator system with automatic research detection"
  target: "Claude AI agents working with research framework"
  supersedes: "ai-agent-integration.yaml"

# CLAUDE FILE REFERENCE PATTERNS
orchestrator_file_references:
  config_files:
    context_analyzer: "research/orchestrator/engines/context-analyzer.yaml"
    method_registry: "research/orchestrator/config/method-registry.yaml"
    selection_rules: "research/orchestrator/config/selection-rules.yaml"
  
  method_files:
    existing_methods: "research/orchestrator/methods/existing/"
    advanced_methods: "research/orchestrator/methods/advanced/"
    methods_index: "research/orchestrator/methods/methods-index.yaml"
  
  integration_files:
    workflow_orchestrator: "research/orchestrator/integration/workflow-orchestrator.yaml"
    claude_integration: "research/orchestrator/integration/claude-orchestrator-integration.yaml"
  
  claude_usage_notes:
    - "Use Read tool with these exact paths"
    - "Claude can access all files directly using file_path parameter"
    - "No @ prefixes needed for research/ folder - use direct paths"
    - "Files are organized for systematic orchestrator workflow"

# RESEARCH INTENTION DETECTION
research_intention_detection:
  automatic_triggers:
    direct_keywords:
      - "research"
      - "analyze"
      - "investigate"
      - "explore"
      - "study"
      - "examine"
      - "assess"
      - "evaluate"
    
    phrase_patterns:
      - "help me understand"
      - "what are the implications"
      - "comprehensive analysis"
      - "in-depth look"
      - "detailed examination"
      - "systematic review"
      - "thorough investigation"
    
    context_indicators:
      - multi_domain_questions: "contains 'and', 'intersection', 'impact on', 'relationship between'"
      - complex_scenarios: "emerging technology, ethical implications, future trends"
      - comparative_analysis: "compare", "contrast", "versus", "differences between"
      - strategic_planning: "strategy", "roadmap", "implementation", "approach"
  
  activation_conditions:
    always_use_orchestrator:
      - "User explicitly requests research"
      - "Question involves multiple domains"
      - "Request requires structured analysis"
      - "Topic involves emerging technologies"
      - "User asks for comprehensive coverage"
    
    consider_orchestrator:
      - "Complex problem-solving requests"
      - "Feature development workflows"
      - "Document creation requiring research"
      - "Quality requirements appear high"
    
    skip_orchestrator:
      - "Simple factual questions"
      - "Code debugging or syntax help"
      - "Direct file operations"
      - "Basic conversational queries"

# CLAUDE HYBRID ORCHESTRATOR USAGE WORKFLOW
claude_orchestrator_workflow:
  step_1_detect_research_intent:
    process: "Check user request against research_intention_detection patterns"
    output: "decision: use_orchestrator | skip_orchestrator | uncertain"
    
    uncertain_handling:
      - "Ask user: 'Would you like me to use the research framework for this?'"
      - "Explain benefit: 'The research framework will provide more comprehensive analysis'"
      - "Default to orchestrator for complex or ambiguous requests"
  
  step_1b_determine_execution_mode:
    process: "Claude Code always uses multi-agent mode with Task tool capability"
    reference_file: "research/orchestrator/engines/hybrid-orchestrator-controller.yaml"
    
    claude_code_default_mode:
      agent_type: "Claude Code"
      execution_mode: "multi_agent"
      method_directory: "research/orchestrator/methods/multi-agent/"
      capabilities: "Sub-agent spawning, parallel execution, result synthesis, individual file saving"
      default_behavior: "Always spawn specialized sub-agents for comprehensive research"
    
    mode_announcement:
      template: |
        🔀 Research Execution Mode: multi_agent
        Agent Type: Claude Code  
        Capabilities: Sub-agent spawning, parallel execution, result synthesis
        Method Directory: research/orchestrator/methods/multi-agent/
  
  step_2_extract_context:
    action: "Parse user request to extract orchestrator input parameters"
    required_parameters:
      - research_topic: "Main subject of research from user request"
      - quality_requirements: "Infer from user language: basic/high/critical"
      - time_constraints: "Infer from user urgency: urgent/normal/extended/flexible"
  
    
    optional_parameters:
      - research_scope: "Determine from topic breadth: narrow/moderate/broad"
      - domain_specificity: "Assess domain needs: general/specialized/cross_domain"
      - stakeholder_level: "Infer from user expertise: general/professional/expert"
      - output_format: "Type of deliverable: report/presentation/documentation/analysis"
  
    
    extraction_examples:
      simple_request:
        input: "Research remote work productivity"
        output:
          research_topic: "remote work productivity impact"
          research_scope: "moderate"
          quality_requirements: "high"
          time_constraints: "normal"
          domain_specificity: "business"
      
      complex_request:
        input: "I need a comprehensive analysis of AGI ethical implications on global economics for my PhD thesis"
        output:
          research_topic: "AGI ethical implications on global economics"
          research_scope: "broad"
          quality_requirements: "critical"
          time_constraints: "extended"
          domain_specificity: "cross_domain"
          stakeholder_level: "expert"
          output_format: "academic analysis"
  
  step_2_5_registry_analysis:
    action: "Analyze existing research registry for similar topics before proceeding"
    reference_files:
      - "research/findings/research-registry.yaml"
      - "research/findings/research-browser.yaml"
    
    process:
      registry_loading:
        - load_master_registry: "Read research/findings/research-registry.yaml"
        - extract_research_topics: "Get all topic_ids, titles, key_outcomes, and applications"
        - load_similarity_data: "Access pre-computed similarity scores if available"
      
      similarity_analysis:
        - semantic_comparison: "Compare extracted research_topic against existing titles and outcomes"
        - keyword_matching: "Match domain keywords and technical terms"
        - application_overlap: "Compare intended applications and use cases"
        - calculate_similarity_scores: "Generate numerical similarity scores (0.0-1.0)"
      
      recommendation_logic:
        high_similarity_threshold: 0.80
        moderate_similarity_threshold: 0.40
        
        high_similarity_action: "≥80% similar - Recommend referencing existing research"
        moderate_similarity_action: "40-79% similar - Recommend extending existing research"
        low_similarity_action: "≤39% similar - Proceed with new research"
    
    output_format:
      registry_analysis_results:
        total_existing_research: 0
        similar_research_found: []  # Array of matching research with similarity scores
        highest_similarity_score: 0.0
        highest_similarity_topic: "topic_id"
        recommendation: "reference_existing|extend_existing|proceed_new"
        recommendation_rationale: "explanation of similarity analysis and recommendation"
        existing_research_to_reference: []  # List of research to cite/build upon
    
    decision_framework:
      high_similarity:
        condition: "similarity_score >= 0.80"
        action: "Display existing research summary and ask user if they want to proceed"
        message: "🔍 Found highly similar research: [title] (similarity: XX%). Consider referencing instead of duplicating."
        user_options: ["Reference existing", "Build upon existing", "Proceed with new research anyway"]
      
      moderate_similarity:
        condition: "0.40 <= similarity_score < 0.80"
        action: "Recommend extending existing research"
        message: "🔄 Found related research: [title] (similarity: XX%). Consider extending this work."
        integration_suggestion: "Build upon existing findings, cite previous work, add new perspectives"
      
      low_similarity:
        condition: "similarity_score < 0.40"
        action: "Proceed with comprehensive new research"
        message: "✅ No highly similar research found. Proceeding with comprehensive analysis."
        citation_note: "Will reference any moderately related research where appropriate"
  
  step_3_run_context_analysis:
    reference_file: "research/orchestrator/engines/context-analyzer.yaml"
    process:
      complexity_assessment:
        - check_emerging_technology: "Look for AI, quantum, blockchain, etc."
        - check_multiple_domains: "Look for 'and', 'intersection', 'impact', etc."
        - check_ethical_implications: "Look for ethical, bias, privacy keywords"
        - apply_scoring_algorithm: "Use complexity_scoring from context-analyzer.yaml"
      
      domain_analysis:
        - map_to_domain_categories: "Use domain_mapping from context-analyzer.yaml"
        - determine_expertise_required: "Based on domain_specificity"
        - identify_context_patterns: "Match against context_patterns"
    
    output_format:
      complexity_level: "simple|moderate|complex"
      domain_type: "general|specialized|cross_domain|emerging"
      quality_level: "basic|high|critical"
      confidence_score: "0.0-1.0"
  
  step_3_5_discover_information_sources:
    reference_files:
      - "meta/information-access/agent-decision-framework.md"
      - "meta/information-access/topic-mappings/"
      - "meta/information-access/category-mappings/"
      - "knowledge-vault/databases/tools_services/views/information-sources-by-type.yaml"
    
    purpose: "Intelligent source discovery for optimal research information access"
    integration: "Bridges comprehensive MCP infrastructure with practical research needs"
    
    source_discovery_process:
      topic_analysis:
        - extract_research_topic: "Parse research topic from user request and context analysis"
        - identify_technology_specifics: "Look for specific technologies (React, PostgreSQL, etc.)"
        - classify_domain_categories: "Identify broader categories (frontend, database, etc.)"
        - assess_information_needs: "Determine what types of information will be required"
      
      mapping_selection:
        specific_technology_routing:
          - check_topic_mappings: "Look for specific technology mappings in meta/information-access/topic-mappings/"
          - react_example: "React research → react-sources.yaml (GitHub, Context7, npm)"
          - priority: "Specific mappings override categorical patterns"
        
        categorical_pattern_routing:
          - check_category_mappings: "Look for category patterns in meta/information-access/category-mappings/"
          - database_example: "Database research → database-sources.yaml (PostgreSQL MCP, knowledge-vault query)"
          - fallback: "Use when specific technology not identified"
        
        knowledge_vault_fallback:
          - query_tools_services: "Query knowledge-vault/databases/tools_services/ for available sources"
          - apply_filters: "Use information-access tags and authentication requirements"
          - rank_sources: "Apply decision framework scoring for optimal selection"
      
      multi_source_coordination:
        - primary_sources: "Select 1-2 primary sources based on topic/category mapping"
        - supplementary_sources: "Add complementary sources for comprehensive coverage"
        - validation_sources: "Include cross-reference sources for accuracy validation"
        - fallback_sources: "Prepare backup sources in case primary sources unavailable"
    
    output_format:
      selected_sources:
        primary: ["source_name with access_pattern"]
        supplementary: ["source_name with access_pattern"]
        validation: ["source_name with access_pattern"]
        fallback: ["source_name with access_pattern"]
      
      source_coordination_plan:
        sequential_sources: "Sources that must be accessed in order"
        parallel_sources: "Sources that can be accessed simultaneously"
        conditional_sources: "Sources activated based on intermediate findings"
      
      integration_strategy:
        mcp_servers: "Specific MCP server tools and access patterns"
        knowledge_vault: "Knowledge vault queries and view usage"
        web_sources: "WebFetch and WebSearch coordination"
        authentication: "Required authentication and setup complexity"
      
      source_optimization:
        estimated_setup_time: "Total time to configure all selected sources"
        authentication_complexity: "Overall authentication difficulty (1-10 scale)"
        rate_limit_coordination: "Strategy for managing rate limits across sources"
        error_handling: "Fallback procedures and error recovery"
  
  step_4_select_methods:
    reference_files:
      - "research/orchestrator/config/selection-rules.yaml"
      - "research/orchestrator/config/method-registry.yaml"
    
    selection_process:
      primary_method_selection:
        - use_complexity_mapping: "From selection-rules.yaml complexity_based"
        - consider_domain_preferences: "From context-analyzer.yaml domain_analysis_rules"
        - apply_selection_principles: "From selection-rules.yaml selection_principles"
      
      enhancement_selection:
        - add_quality_methods: "Based on quality_requirements from selection-rules.yaml"
        - check_compatibility: "Use compatibility_matrix from method-registry.yaml"
        - optimize_combination: "Apply combination_optimization algorithm"
    
    output_format:
      selected_methods:
        primary: ["method_name"]
        enhancement: ["method_name"]
      execution_pattern: "sequential|parallel|hybrid"
      estimated_duration: "time estimate"
      selection_rationale: "explanation of why these methods were chosen"
  
  step_5_execute_methods:
    claude_code_multi_agent_execution:
      method_access:
        multi_agent_methods: "research/orchestrator/methods/multi-agent/[method_name].md"
        sub_agent_spawner: "research/orchestrator/engines/sub-agent-spawner.yaml"
      
      execution_process:
        - "Load multi-agent method specification from methods/multi-agent/"
        - "Apply information source discovery results to sub-agent specialization"
        - "Integrate selected sources into sub-agent task prompts"
        - "Extract sub-agent specifications and task prompts with source coordination"
        - "Spawn specialized sub-agents using Task tool with source-aware execution"
        - "Coordinate parallel sub-agent execution with multi-source access"
        - "Monitor sub-agent progress, completion, and source utilization"
        - "Validate source accessibility and authentication across sub-agents"
        - "Collect and validate sub-agent outputs with source attribution"
        - "Save all individual sub-agent research files with source tracking"
        - "Apply synthesis instructions to integrate results and source findings"
        - "Create comprehensive analysis file combining all perspectives and sources"
      
      file_saving_requirements:
        CRITICAL_PATH_ENFORCEMENT: "RESEARCH FINDINGS MUST GO IN /research/findings/ - NEVER /docs/ OR ANY OTHER LOCATION"
        correct_base_path: "research/findings/[topic-name]/ - Use this exact pattern"
        incorrect_paths_forbidden: "NEVER use docs/, projects/, ai/, or any path other than research/findings/"
        folder_structure: "research/findings/[topic]/ with /research/ and /.meta/ subfolders"
        research_folder: "MANDATORY - All research content in research/findings/[topic]/research/ folder"
        individual_sub_agent_files: "MANDATORY - Each sub-agent saves to research/findings/[topic]/research/perspective-X-name.md or research/module-X-name.md"
        comprehensive_analysis: "MANDATORY - Create research/findings/[topic]/research/comprehensive-analysis.md combining all sub-agent work"
        meta_folder: "MANDATORY - All session info in research/findings/[topic]/.meta/ folder (hidden)"
        research_plan: "MANDATORY - Create research/findings/[topic]/.meta/research-plan.md using research-plan-template.md"
        research_sources: "MANDATORY - Create research/findings/[topic]/.meta/research-sources.md using research-sources-template.md"
        method_compliance: "MANDATORY - Create research/findings/[topic]/.meta/method-compliance.yaml using method-compliance-template.yaml"
        execution_log: "MANDATORY - Create research/findings/[topic]/.meta/research-execution-log.yaml using research-execution-log-template.yaml"
        inline_citations: "MANDATORY - All research reports must include (Source, Year [https://full-url]) format"
        path_validation: "VERIFY paths start with research/findings/ before creating any files"
        DOUBLE_CHECK_ENFORCEMENT: "BEFORE CREATING ANY FILES: Verify path starts with research/findings/ - NO EXCEPTIONS"
      
      quality_validation:
        sub_agent_level: "Validate each sub-agent output against quality requirements"
        file_existence: "Verify all individual sub-agent files are saved"
        synthesis_level: "Ensure comprehensive integration of all perspectives"
        cross_agent_validation: "Check consistency across sub-agent outputs"
        completeness_check: "Confirm no sub-agent work is lost in synthesis"
    
    universal_quality_validation:
      constitutional_ai: "For ethical validation and bias checking"
      self_consistency: "For critical accuracy verification"
      iterative_refinement: "For continuous improvement during execution"
  
  step_6_orchestrator_summary:
    always_provide: "Comprehensive orchestrator analysis summary"
    format: "Use claude_output_templates.orchestrator_summary_template"
    include:
      - context_analysis_results
      - method_selection_rationale
      - execution_plan_overview
      - quality_checkpoints_planned
      - estimated_duration
  
  step_7_create_research_files:
    CRITICAL_REQUIREMENT: "MANDATORY FILE CREATION - RESEARCH INCOMPLETE WITHOUT THESE"
    enforcement_level: "NON_NEGOTIABLE"
    
    required_files:
      research_plan_md:
        status: "MANDATORY - MUST CREATE"
        template: "research/templates/research-plan-template.md"
        action: "Create research-plan.md file in research/findings/[topic]/.meta/ folder - NEVER in docs/ or projects/"
        source_data: "Extract from orchestrator_analysis section of execution log"
        required_content:
          - research_topic: "From context extraction"
          - session_info: "Session ID, start time, duration, AI agent"
          - complexity_analysis: "From orchestrator complexity_assessment"
          - method_selection: "Primary methods, enhancement methods, reasoning"
          - execution_approach: "Research plan steps and approach"
          - quality_validation: "Constitutional AI, self-consistency plans"
        validation: "File must exist and contain all required sections"
      
      research_sources_md:
        status: "MANDATORY - MUST CREATE" 
        template: "research/templates/research-sources-template.md"
        action: "Create research-sources.md file in research/findings/[topic]/.meta/ folder - NEVER in docs/ or projects/"
        source_tracking: "Track ALL tool usage during research execution"
        required_tracking:
          - information_source_discovery: "Sources selected via information access framework with rationale"
          - mcp_server_usage: "EVERY MCP server tool call with server name, tool, and result"
          - web_sources: "EVERY WebFetch/WebSearch URL with timestamp"
          - internal_docs: "EVERY Read tool file path with timestamp"
          - external_files: "EVERY file system access with timestamp"
          - search_queries: "EVERY search performed with timestamp"
          - knowledge_vault_queries: "Knowledge vault view usage and filter applications"
          - topic_vs_category_routing: "Whether specific technology or category mapping used"
        required_content:
          - session_summary: "Topic, duration, total source counts"
          - categorized_sources: "Organized by type with metadata"
          - source_quality: "Diversity, freshness, credibility scores"
        validation: "File must exist with complete source tracking"
    
    COMPLETION_GATE: "Research session is NOT COMPLETE until both files are created"
    FAILURE_CONSEQUENCE: "Missing files = failed research session"
    SUCCESS_CRITERIA: "Both research-plan.md and research-sources.md exist and contain required content"
    
    ai_agent_enforcement:
      - "CRITICAL: VERIFY all file paths start with research/findings/ - NEVER docs/ or projects/"
      - "Check file existence before marking research complete"
      - "Use Write tool to create both files using templates"
      - "Populate templates with actual research data"
      - "Verify files contain all required sections"
      - "Do not end research session without both files"
      - "DOUBLE-CHECK: All research content must be in research/findings/[topic]/reports/"
      - "DOUBLE-CHECK: All metadata must be in research/findings/[topic]/.meta/"

  step_8_generate_human_summary:
    CRITICAL_REQUIREMENT: "MANDATORY HUMAN-FRIENDLY SUMMARY GENERATION"
    enforcement_level: "REQUIRED_FOR_REGISTRY_BROWSER"
    
    purpose: "Generate human-readable summaries for research-browser.yaml and ai-help.md display"
    template_source: "research/templates/research-summary-template.yaml"
    
    required_actions:
      individual_summary_creation:
        status: "MANDATORY - MUST CREATE"
        file_location: "research/findings/[topic]/summary.yaml"
        template: "research/templates/research-summary-template.yaml"
        data_sources:
          - execution_log: "research/findings/[topic]/.meta/research-execution-log.yaml"
          - comprehensive_analysis: "research/findings/[topic]/research/comprehensive-analysis.md"
          - research_registry: "research/findings/research-registry.yaml"
        
        extraction_requirements:
          - quality_metrics: "Extract quality scores, compliance percentages, execution time"
          - executive_summary: "Generate one-line outcome and key discoveries from comprehensive analysis"
          - categorization: "Auto-categorize by domain using keyword analysis"
          - applications: "Extract practical applications and use cases"
          - relationships: "Identify similar research and dependencies from registry"
      
      registry_browser_update:
        status: "MANDATORY - MUST UPDATE"
        file_location: "research/findings/research-browser.yaml"
        template: "research/templates/research-browser-template.yaml"
        
        update_requirements:
          - add_research_item: "Add new research to appropriate category"
          - update_statistics: "Recalculate total sessions, average quality, recent activity"
          - update_similarity_data: "Add similarity scores to existing research"
          - update_dashboard: "Refresh quality dashboard and recent research lists"
          - validate_categories: "Ensure all research is properly categorized"
        
        categorization_logic:
          ai_keywords: ["ai", "agent", "validation", "orchestration", "performance", "ml", "claude"]
          auth_keywords: ["auth", "keycloak", "workos", "security", "compliance", "identity"]
          infrastructure_keywords: ["database", "hosting", "deployment", "ci", "cd", "development"]
          enterprise_keywords: ["enterprise", "governance", "information", "quality", "assessment"]
          tools_keywords: ["mcp", "server", "integration", "tool", "registry", "discovery"]
    
    quality_requirements:
      summary_completeness: "All required fields populated from template"
      categorization_accuracy: "Correct domain classification based on keywords"
      cross_reference_validation: "All file paths and topic references valid"
      human_readability: "Summary suitable for ai-help.md display"
      data_integrity: "Quality scores and metrics accurately extracted"
    
    validation_steps:
      - verify_summary_file_created: "research/findings/[topic]/summary.yaml exists"
      - verify_browser_updated: "research/findings/research-browser.yaml contains new research"
      - verify_categorization: "Research placed in correct category"
      - verify_quality_data: "Quality metrics accurately transferred"
      - verify_relationships: "Similarity analysis and cross-references populated"
    
    COMPLETION_GATE: "Research session NOT COMPLETE until human-friendly summaries generated"
    FAILURE_CONSEQUENCE: "Missing summaries = research not discoverable via ai-help.md"
    SUCCESS_CRITERIA: "Both individual summary.yaml and updated research-browser.yaml exist and valid"
    
    ai_agent_enforcement:
      - "CRITICAL: Create summary.yaml in research/findings/[topic]/ using research-summary-template.yaml"
      - "CRITICAL: Update research-browser.yaml with new research entry and updated statistics"
      - "Extract quality metrics from research-execution-log.yaml accurately"
      - "Generate human-readable executive summary from comprehensive-analysis.md"
      - "Apply keyword-based categorization logic consistently"
      - "Calculate similarity scores against existing research"
      - "Validate all file paths and cross-references before completion"
      - "Do not mark research complete without both summary files"

# CLAUDE DECISION TREES
claude_decision_trees:
  research_activation_decision:
    check_direct_research_request:
      if: "user_request contains research_keywords"
      then: "activate_orchestrator"
      confidence: "high"
    
    check_complexity_indicators:
      if: "multi_domain OR emerging_tech OR ethical_implications"
      then: "activate_orchestrator"
      confidence: "high"
    
    check_analysis_depth:
      if: "comprehensive OR in_depth OR thorough OR systematic"
      then: "activate_orchestrator"
      confidence: "medium"
    
    check_uncertainty:
      if: "ambiguous_request OR complex_topic"
      then: "ask_user_preference"
      confidence: "low"
    
    default_action: "proceed_without_orchestrator"
  
  method_selection_decision_tree:
    context_complexity_simple:
      if: "complexity_level == 'simple'"
      then:
        time_urgent: "step_by_step_research"
        quality_focused: "primary_research + constitutional_ai"
        resource_limited: "universal_research"
        default: "universal_research"
    
    context_complexity_moderate:
      if: "complexity_level == 'moderate'"
      then:
        domain_general: "adaptive_chain_of_thought"
        domain_specialized: "domain_adaptive"
        decomposition_needed: "modular_task_decomposition"
        quality_high: "add constitutional_ai"
        default: "domain_adaptive"
    
    context_complexity_complex:
      if: "complexity_level == 'complex'"
      then:
        systematic_breakdown_needed: "complex_research"
        comprehensive_analysis_needed: "multi_perspective_approach"
        creative_exploration_needed: "tree_of_thoughts"
        maximum_quality_needed: "ensemble_methods"
        mandatory_quality: "always add constitutional_ai + self_consistency"
  
  execution_pattern_decision_tree:
    resource_assessment:
      computational_load_very_high: "hybrid"
      computational_load_high: "parallel"
      time_constraints_urgent: "sequential"
      quality_requirements_critical: "hybrid"
      method_dependencies_exist: "sequential"
      default: "sequential"

# CLAUDE OUTPUT TEMPLATES
claude_output_templates:
  orchestrator_summary_template: |
    ## 🧠 Research Orchestrator Analysis
    
    **Context Analysis:**
    - Complexity: ${complexity_level} (${complexity_confidence}% confidence)
    - Domain: ${domain_type} requiring ${expertise_required} expertise
    - Quality Target: ${quality_level} with ${validation_needs}
    
    **Selected Methods:**
    - Primary: ${primary_methods}
    - Enhancement: ${enhancement_methods}
    - Pattern: ${execution_pattern}
    
    **Execution Plan:**
    ${execution_sequence}
    
    **Quality Checkpoints:**
    ${quality_checkpoints}
    
    **Estimated Duration:** ${estimated_duration}
  
  method_application_template: |
    ## 📋 Applying ${method_name}
    
    **Method Context:** ${method_description}
    **Why Selected:** ${selection_rationale}
    **Expected Outcome:** ${expected_outcome}
    
    ${method_execution_content}
    
    **Quality Check:** ${quality_validation}
  
  research_activation_template: |
    ## 🔍 Research Framework Activated
    
    **Detected:** ${detection_reason}
    **Approach:** Using orchestrated research methods for comprehensive analysis
    **Benefit:** Enhanced quality, systematic methodology, and structured insights
    
    ${orchestrator_summary}

# PRACTICAL CLAUDE WORKFLOWS
claude_workflows:
  automatic_research_detection:
    user_request: "Help me understand the impact of AI on healthcare"
    
    claude_process:
      - detect_research_intent:
          triggers: ["understand", "impact", "multi-domain context"]
          decision: "activate_orchestrator"
          confidence: "high"
      
      - extract_context:
          research_topic: "AI impact on healthcare"
          research_scope: "moderate"
          quality_requirements: "high"
          domain_specificity: "cross_domain"
      
      - run_orchestrator_analysis:
          complexity_level: "moderate"
          domain_type: "cross_domain"
          selected_methods: ["domain_adaptive", "constitutional_ai"]
          execution_pattern: "sequential"
      
      - execute_research:
          provide_orchestrator_summary: true
          apply_selected_methods: true
          follow_quality_checkpoints: true
  
  user_triggered_research:
    user_request: "Research the ethical implications of AGI development"
    
    claude_process:
      - detect_research_intent:
          triggers: ["research", "ethical implications", "emerging technology"]
          decision: "activate_orchestrator"
          confidence: "high"
      
      - extract_context:
          research_topic: "ethical implications of AGI development"
          research_scope: "broad"
          quality_requirements: "critical"
          domain_specificity: "cross_domain"
          stakeholder_level: "expert"
      
      - run_orchestrator_analysis:
          complexity_level: "complex"
          domain_type: "cross_domain"
          selected_methods: ["multi_perspective_approach", "constitutional_ai", "self_consistency"]
          execution_pattern: "hybrid"
      
      - execute_research:
          provide_orchestrator_summary: true
          apply_all_selected_methods: true
          extensive_quality_validation: true

# INTEGRATION WITH CLAUDE CODE COMMANDS
claude_code_integration:
  command_compatibility:
    research_command: ".claude/commands/research.md"
    relationship: "complementary"
    usage: "Command file provides CLI interface, this file provides comprehensive orchestrator logic"
  
  command_enhancement:
    before_command_execution:
      - "Check this file for research intention detection"
      - "Use orchestrator workflow if research intent detected"
      - "Apply method selection logic from this file"
    
    during_command_execution:
      - "Follow orchestrator workflow steps"
      - "Use file references from this file"
      - "Apply quality checkpoints"
    
    after_command_execution:
      - "Provide orchestrator summary"
      - "Document effectiveness for future optimization"

# QUALITY ASSURANCE FOR CLAUDE
claude_quality_guidelines:
  research_activation_validation:
    - "Verify research intent detection is accurate"
    - "Confirm orchestrator activation is appropriate"
    - "Check user expectation alignment"
  
  orchestrator_execution_validation:
    - "Verify all required context parameters are extracted"
    - "Confirm complexity assessment reasoning is sound"
    - "Check domain analysis matches research topic"
    - "Validate method selection against orchestrator rules"
  
  method_application_validation:
    - "Follow method-specific instructions exactly"
    - "Apply enhancement methods as selected"
    - "Execute quality checkpoints at specified intervals"
    - "Validate against success metrics"
  
  output_quality_validation:
    - "Provide orchestrator analysis summary"
    - "Document method effectiveness"
    - "Check research output quality against requirements"
    - "Ensure user expectations are met"

# SUCCESS METRICS FOR CLAUDE
claude_success_metrics:
  research_detection_accuracy:
    - "Correctly identifies research requests: >90%"
    - "Appropriate orchestrator activation: >85%"
    - "User satisfaction with research quality: >90%"
  
  orchestrator_effectiveness:
    - "Method selection aligns with orchestrator recommendations: >95%"
    - "Quality improvements are measurable: >80%"
    - "Execution follows orchestrator guidance: >90%"
  
  integration_success:
    - "Seamless integration with existing workflows: >85%"
    - "Command system compatibility: 100%"
    - "User experience enhancement: >90%"

# ADAPTIVE ORCHESTRATION
adaptive_orchestration:
  mid_execution_optimization:
    triggers:
      - "Method not producing expected results"
      - "User feedback indicates different approach needed"
      - "Time constraints require adaptation"
      - "Quality requirements change during execution"
    
    adaptation_process:
      - assess_current_situation: "Analyze progress and identify issues"
      - re_run_context_analysis: "Update context with new information"
      - adjust_method_selection: "Select alternative or additional methods"
      - update_execution_plan: "Modify approach based on new analysis"
      - communicate_changes: "Inform user of adaptations and rationale"
    
    adaptation_examples:
      quality_insufficient:
        trigger: "Initial method not meeting quality requirements"
        adaptation: "Add constitutional_ai + self_consistency validation"
        communication: "Enhancing analysis with additional quality methods"
      
      scope_expansion:
        trigger: "User requests broader analysis mid-execution"
        adaptation: "Switch to multi_perspective_approach or ensemble_methods"
        communication: "Expanding research scope with comprehensive methods"
      
      time_constraints:
        trigger: "User indicates urgency during execution"
        adaptation: "Switch to step_by_step_research or universal_research"
        communication: "Optimizing for speed while maintaining quality"

# VERSION COMPATIBILITY
version_compatibility:
  current_version: "2.0.0"
  compatible_versions: ["2.0.0", "2.0.1", "2.0.2"]
  breaking_changes: "None from v1.0.0"
  migration_notes: "Automatic migration from ai-agent-integration.yaml"
  deprecation_warnings: "ai-agent-integration.yaml will be removed"