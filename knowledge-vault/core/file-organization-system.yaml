# Knowledge Vault File Organization System
# Implements cross-references, tag-based categorization, and hub-spoke architecture
# Provides comprehensive file management for all database operations

system_info:
  name: "Knowledge Vault File Organization System"
  description: "File-based implementation of hub-spoke database architecture with cross-referencing"
  version: "1.0.0"
  created: "2024-07-21"
  last_updated: "2024-07-21"

# Directory Structure Specification
directory_structure:
  base_path: "knowledge-vault/"
  
  # Core System Directories
  core:
    path: "core/"
    description: "System configuration and management files"
    contents:
      - "file-organization-system.yaml"  # This file
      - "cross-reference-manager.yaml"
      - "tag-categorization-engine.yaml"
      - "relationship-coordinator.yaml"
      - "validation-engine.yaml"
  
  # Database Schema Definitions
  schemas:
    path: "schemas/"
    description: "Database schema definitions and configurations"
    contents:
      - "knowledge-vault-schema.yaml"    # Central hub database
      - "training-vault-schema.yaml"     # Learning progression
      - "business-ideas-schema.yaml"     # Innovation pipeline
      - "platforms-sites-schema.yaml"    # Resource evaluation
      - "tools-services-schema.yaml"     # Technology adoption
      - "notes-ideas-schema.yaml"        # Idea development
      - "job-sites-schema.yaml"          # Career resources
  
  # Shared System Resources
  shared:
    path: "shared/"
    description: "Shared vocabularies, workflows, and configurations"
    contents:
      - "tags-vocabulary.yaml"           # Standardized tagging system
      - "status-workflows.yaml"          # Workflow rules and transitions
      - "relationship-definitions.yaml"  # Cross-database relationship specs
      - "validation-rules.yaml"          # Data integrity validation rules
  
  # Database Instances (File-based storage)
  databases:
    path: "databases/"
    description: "Individual database implementations with items and relations"
    structure:
      knowledge_vault:
        path: "knowledge_vault/"
        schema_reference: "../schemas/knowledge-vault-schema.yaml"
        contents:
          items: "items/"              # Individual knowledge items
          relations: "relations/"      # Cross-database relationships
          indexes: "indexes/"          # Performance indexes
          views: "views/"             # Predefined views and filters
          metadata: "metadata/"       # Item metadata and tracking
      
      training_vault:
        path: "training_vault/"
        schema_reference: "../schemas/training-vault-schema.yaml"
        contents:
          items: "items/"
          relations: "relations/"
          indexes: "indexes/"
          views: "views/"
          metadata: "metadata/"
      
      business_ideas:
        path: "business_ideas/"
        schema_reference: "../schemas/business-ideas-schema.yaml"
        contents:
          items: "items/"
          relations: "relations/"
          indexes: "indexes/"
          views: "views/"
          metadata: "metadata/"
      
      platforms_sites:
        path: "platforms_sites/"
        schema_reference: "../schemas/platforms-sites-schema.yaml"
        contents:
          items: "items/"
          relations: "relations/"
          indexes: "indexes/"
          views: "views/"
          metadata: "metadata/"
      
      tools_services:
        path: "tools_services/"
        schema_reference: "../schemas/tools-services-schema.yaml"
        contents:
          items: "items/"
          relations: "relations/"
          indexes: "indexes/"
          views: "views/"
          metadata: "metadata/"
      
      notes_ideas:
        path: "notes_ideas/"
        schema_reference: "../schemas/notes-ideas-schema.yaml"
        contents:
          items: "items/"
          relations: "relations/"
          indexes: "indexes/"
          views: "views/"
          metadata: "metadata/"
      
  
  # System Operations and Utilities
  operations:
    path: "operations/"
    description: "System operations, scripts, and utilities"
    contents:
      - "backup-restore.yaml"
      - "sync-operations.yaml"
      - "maintenance-scripts.yaml"
      - "import-export.yaml"

# File Naming Conventions
naming_conventions:
  item_files:
    pattern: "{database}_{item_id}.yaml"
    example: "knowledge_vault_a1b2c3d4-e5f6-7890-abcd-ef1234567890.yaml"
    description: "Individual database items with UUID identifiers"
  
  relation_files:
    pattern: "{source_db}_to_{target_db}_{relation_type}.yaml"
    example: "knowledge_vault_to_training_vault_related_training.yaml"
    description: "Cross-database relationship mappings"
  
  index_files:
    pattern: "{database}_{index_type}_index.yaml"
    example: "knowledge_vault_tags_priority_index.yaml"
    description: "Performance indexes for efficient querying"
  
  view_files:
    pattern: "{database}_{view_name}_view.yaml"
    example: "knowledge_vault_high_priority_view.yaml"
    description: "Predefined views and filter configurations"
  
  metadata_files:
    pattern: "{database}_metadata_{timestamp}.yaml"
    example: "knowledge_vault_metadata_20240721.yaml"
    description: "Database metadata and usage statistics"

# Cross-Reference Management System
cross_reference_system:
  reference_format: "@{database}/{item_id}"
  example: "@knowledge_vault/a1b2c3d4-e5f6-7890-abcd-ef1234567890"
  
  bidirectional_enforcement:
    enabled: true
    description: "All relationships must be bidirectional"
    validation: "Automatic validation of dual properties"
  
  reference_types:
    internal_reference:
      format: "@{database}/{item_id}"
      description: "References within knowledge vault system"
      
    external_reference:
      format: "@external/{system}/{identifier}"
      description: "References to external systems (e.g., Notion)"
      example: "@external/notion/c3ab8f4e-e6fd-40c5-ad65-e0b69d303531"
  
  relationship_validation:
    consistency_check: true
    orphan_detection: true
    circular_reference_prevention: true
    cascade_updates: true

# Tag-Based Categorization System
tag_categorization:
  vocabulary_source: "shared/tags-vocabulary.yaml"
  
  tag_assignment:
    automatic_tagging:
      enabled: true
      description: "Auto-assign tags based on content analysis"
      rules:
        - pattern: "ai|machine learning|artificial intelligence"
          tags: ["ai", "technology"]
        - pattern: "business strategy|market analysis"
          tags: ["business-strategy", "business"]
        - pattern: "productivity|efficiency|automation"
          tags: ["productivity", "efficiency", "automation"]
    
    manual_tagging:
      enabled: true
      description: "Manual tag assignment with vocabulary validation"
      validation: "Tags must exist in shared vocabulary"
  
  tag_hierarchies:
    implementation: "Flat structure with category prefixes"
    categories:
      - "technology"
      - "business"
      - "productivity"
      - "industry"
      - "learning"
    
    cross_category_tagging:
      allowed: true
      description: "Items can have tags from multiple categories"
  
  tag_based_filtering:
    enabled: true
    operators: ["AND", "OR", "NOT"]
    example: "tags:ai AND tags:business NOT tags:deprecated"
    
    tag_queries:
      syntax: "tags:{tag_name}"
      multiple: "tags:{tag1} AND tags:{tag2}"
      negation: "NOT tags:{tag_name}"

# Hub-Spoke Architecture Implementation
hub_spoke_architecture:
  central_hub: "knowledge_vault"
  
  hub_responsibilities:
    - "Coordinate cross-database relationships"
    - "Maintain global tags and priorities"
    - "Provide unified search and discovery"
    - "Track system-wide dependencies"
  
  spoke_databases:
    - database: "training_vault"
      connection_type: "learning_relationship"
      dual_property: "related_training"
      
    - database: "business_ideas" 
      connection_type: "business_relationship"
      dual_property: "related_business_ideas"
      
    - database: "platforms_sites"
      connection_type: "platform_relationship" 
      dual_property: "related_platforms"
      
    - database: "tools_services"
      connection_type: "tool_relationship"
      dual_property: "related_tools"
      
    - database: "notes_ideas"
      connection_type: "notes_relationship"
      dual_property: "related_notes"
      
  
  relationship_propagation:
    enabled: true
    description: "Changes in spoke databases propagate to central hub"
    validation: "Hub maintains consistency across all spokes"

# File Operations and Management
file_operations:
  create_operations:
    item_creation:
      - "Generate UUID identifier"
      - "Validate against schema"
      - "Apply automatic tagging"
      - "Create bidirectional relationships"
      - "Update relevant indexes"
    
    relationship_creation:
      - "Validate both endpoints exist"
      - "Create dual properties"
      - "Update relationship files"
      - "Propagate to hub database"
  
  update_operations:
    item_updates:
      - "Validate changes against schema"
      - "Update modification timestamp"
      - "Re-apply automatic tagging if content changed"
      - "Update affected relationships"
      - "Refresh relevant indexes and views"
    
    relationship_updates:
      - "Validate relationship integrity"
      - "Update both endpoints"
      - "Maintain bidirectional consistency"
      - "Update hub coordination"
  
  delete_operations:
    safe_deletion:
      - "Check for dependent relationships"
      - "Provide cascade options"
      - "Archive rather than hard delete"
      - "Update all affected cross-references"
    
    orphan_cleanup:
      - "Identify orphaned relationships"
      - "Remove invalid cross-references"
      - "Update indexes and views"

# Performance Optimization
performance:
  indexing_strategy:
    primary_indexes:
      - field: "id"
        type: "unique"
        description: "Primary key lookup"
      
      - field: "tags"
        type: "multi_value"
        description: "Tag-based filtering"
      
      - field: "status"
        type: "categorical"
        description: "Status-based queries"
      
      - field: "rating"
        type: "numeric"
        description: "Quality-based sorting"
    
    composite_indexes:
      - fields: ["status", "priority"]
        description: "Active high-priority items"
      
      - fields: ["tags", "rating"]
        description: "Tag-filtered quality sorting"
      
      - fields: ["created_date", "status"]
        description: "Recent items by status"
  
  caching_strategy:
    view_caching:
      enabled: true
      ttl: 3600  # 1 hour
      description: "Cache frequently accessed views"
    
    relationship_caching:
      enabled: true
      ttl: 1800  # 30 minutes
      description: "Cache relationship mappings"
    
    tag_index_caching:
      enabled: true
      ttl: 7200  # 2 hours
      description: "Cache tag-based indexes"
  
  query_optimization:
    lazy_loading: true
    pagination: true
    result_limiting: true
    early_termination: true

# Integration Points
integration:
  notion_integration:
    enabled: true
    sync_direction: "bidirectional"
    conflict_resolution: "manual_review"
    mapping_files: "operations/notion-mapping.yaml"
  
  search_integration:
    full_text_search: true
    tag_based_search: true
    relationship_traversal: true
    fuzzy_matching: true
  
  api_integration:
    rest_api_support: true
    graphql_support: true
    webhook_support: true
    batch_operations: true

# Validation and Quality Assurance
validation:
  schema_validation:
    enabled: true
    strict_mode: true
    description: "All items must conform to database schemas"
  
  relationship_validation:
    bidirectional_consistency: true
    orphan_detection: true
    circular_reference_detection: true
    constraint_enforcement: true
  
  data_integrity:
    required_field_validation: true
    data_type_validation: true
    constraint_validation: true
    business_rule_validation: true
  
  quality_metrics:
    completeness_score: "Percentage of required fields populated"
    consistency_score: "Relationship consistency across databases"
    freshness_score: "How recently items have been updated"
    usage_score: "How frequently items are accessed"

# Backup and Recovery
backup_recovery:
  backup_strategy:
    full_backup:
      frequency: "daily"
      retention: "30 days"
      description: "Complete system backup"
    
    incremental_backup:
      frequency: "hourly"
      retention: "7 days"
      description: "Changed files only"
    
    relationship_backup:
      frequency: "every 4 hours"
      retention: "14 days"
      description: "Relationship mapping backup"
  
  recovery_procedures:
    point_in_time_recovery: true
    selective_restoration: true
    relationship_rebuilding: true
    integrity_verification: true

# Monitoring and Analytics
monitoring:
  usage_analytics:
    item_access_tracking: true
    relationship_traversal_tracking: true
    tag_usage_analytics: true
    performance_metrics: true
  
  health_monitoring:
    system_health_checks: true
    data_integrity_monitoring: true
    performance_monitoring: true
    relationship_consistency_monitoring: true
  
  reporting:
    daily_summary_reports: true
    weekly_analytics_reports: true
    monthly_system_health_reports: true
    on_demand_custom_reports: true