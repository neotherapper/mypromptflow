# SDLC Subagent Registry
# Comprehensive catalog of specialized AI subagents for 6-stage SDLC workflow

registry_version: "1.4.0"
created_date: "2025-01-28"
last_updated: "2025-01-29"
total_subagents: 13

# Registry Overview
overview:
  purpose: "Specialized AI subagents for maritime insurance platform SDLC workflow"
  architecture: "6-stage SDLC with domain-specific expertise integration"
  technology_stack: ["React", "TypeScript", "FastAPI", "Python", "PostgreSQL", "AWS"]
  domain_focus: "Maritime insurance platform development"
  integration_tools: ["WorkOS", "JIRA", "Sentry"]

# SDLC Workflow Mapping
sdlc_stages:
  stage_1:
    name: "Business Ideation & Requirements"
    description: "Convert business ideas into structured technical requirements"
    primary_subagent: "requirements-analyst"
    supporting_subagents: []
    
  stage_2:
    name: "Design & Architecture"  
    description: "Create UI/UX designs and technical architecture specifications"
    primary_subagents: ["ui-ux-specialist", "system-architect"]
    supporting_subagents: []
    coordination_required: true
    
  stage_3:
    name: "Development Planning"
    description: "Optimize team capacity and sprint planning with resource allocation"
    primary_subagent: "capacity-planner"
    supporting_subagents: []
    
  stage_4:
    name: "Implementation"
    description: "Coordinate development execution with quality enforcement"
    primary_subagent: "implementation-lead"
    supporting_subagents: []
    
  stage_5:
    name: "Testing & Quality Assurance"
    description: "Execute comprehensive testing and quality validation"
    primary_subagent: "qa-specialist"
    supporting_subagents: []
    
  stage_6:
    name: "Deployment & Monitoring"
    description: "Manage production deployments and monitoring setup"
    primary_subagent: "deployment-coordinator"
    supporting_subagents: []

# Subagent Catalog
subagents:
  requirements-analyst:
    name: "Requirements Analyst"
    file: "requirements-analyst.md"
    sdlc_stage: 1
    priority: "high"
    environment: "production"
    team: "product"
    
    description: "Business requirements analysis specialist for SDLC Stage 1. Converts natural language requirements into structured technical specifications with JIRA integration and feasibility assessment."
    
    core_capabilities:
      - "Natural language requirement extraction and formalization"
      - "User story generation with acceptance criteria"
      - "Automated JIRA Epic and Story creation"
      - "Technical and business feasibility assessment"
      - "Maritime insurance domain expertise"
      - "Stakeholder communication and validation"
    
    tools: ["Read", "Grep", "Glob", "WebSearch", "Task"]
    
    integration_patterns:
      - "JIRA automation for Epic/Story creation"
      - "WorkOS integration for stakeholder management"  
      - "Requirements handoff to design stage"
    
    success_metrics:
      - "Requirements clarity score ≥4.5/5.0"
      - "Feasibility assessment accuracy ±15%"
      - "JIRA automation efficiency (60% time reduction)"
      - "Stage handoff quality ≥4.0/5.0"

  ui-ux-specialist:
    name: "UI/UX Specialist"
    file: "ui-ux-specialist.md"
    sdlc_stage: 2
    priority: "high"
    environment: "production"
    team: "design"
    
    description: "UI/UX design specialist for SDLC Stage 2. Handles Figma integration, design system management, and design-to-code conversion with React component specifications."
    
    core_capabilities:
      - "User-centered design with persona development"
      - "Figma integration and design system management"
      - "Maritime insurance UI pattern specialization"
      - "Accessibility compliance (WCAG AA standards)"
      - "React component specification generation"
      - "Design-to-development handoff optimization"
    
    tools: ["Read", "Grep", "Glob", "WebSearch", "Task"]
    
    integration_patterns:
      - "Figma workflow integration and asset export"
      - "Design system component library management"
      - "Parallel coordination with system-architect"
      - "Developer handoff with technical specifications"
    
    success_metrics:
      - "User satisfaction score ≥4.5/5.0"
      - "Design system compliance ≥95%"
      - "Accessibility compliance 100%"
      - "Developer handoff satisfaction ≥4.2/5.0"

  system-architect:
    name: "System Architect"
    file: "system-architect.md"
    sdlc_stage: 2
    priority: "high"
    environment: "production"
    team: "architecture"
    
    description: "Technical system architecture specialist for SDLC Stage 2. Creates comprehensive technical architecture plans with React frontend, FastAPI backend, and AWS infrastructure integration."
    
    core_capabilities:
      - "Comprehensive technical architecture design"
      - "AWS cloud infrastructure planning"
      - "React/FastAPI/PostgreSQL stack optimization"
      - "Security architecture and compliance framework"
      - "Integration architecture for WorkOS/JIRA/Sentry"
      - "Performance and scalability planning"
    
    tools: ["Read", "Grep", "Glob", "WebSearch", "Task"]
    
    integration_patterns:
      - "AWS infrastructure as code (CDK/TypeScript)"
      - "API design and documentation automation"
      - "Security framework integration"
      - "Parallel coordination with ui-ux-specialist"
    
    success_metrics:
      - "System availability ≥99.9%"
      - "API response time ≤500ms (95th percentile)"
      - "Security vulnerability count = 0 critical"
      - "Architecture implementation timeline ≥95%"

  capacity-planner:
    name: "Capacity Planner"
    file: "capacity-planner.md"
    sdlc_stage: 3
    priority: "high"
    environment: "production"
    team: "management"
    
    description: "Sprint planning and capacity management specialist for SDLC Stage 3. Provides AI-assisted capacity planning with skill-based task assignment and JIRA automation for optimal team productivity."
    
    core_capabilities:
      - "AI-enhanced capacity planning and optimization"
      - "Skill-based task assignment algorithms"
      - "4-person team capacity modeling"
      - "JIRA sprint automation and workflow management"
      - "Predictive velocity forecasting"
      - "Resource optimization and workload balancing"
    
    tools: ["Read", "Grep", "Glob", "Task"]
    
    integration_patterns:
      - "JIRA sprint creation and task automation"
      - "Team capacity calculation and optimization"
      - "Skill-matching algorithm for task assignment"
      - "Cross-functional coordination planning"
    
    success_metrics:
      - "Sprint goal achievement rate ≥90%"
      - "Effort estimation accuracy within ±15%"
      - "Team capacity utilization 85-95%"
      - "Workload satisfaction score ≥4.0/5.0"

  implementation-lead:
    name: "Implementation Lead"
    file: "implementation-lead.md"
    sdlc_stage: 4
    priority: "high"
    environment: "production"
    team: "engineering"
    
    description: "Implementation coordination specialist for SDLC Stage 4. Orchestrates development execution with code quality enforcement, progress tracking, and team collaboration optimization."
    
    core_capabilities:
      - "Development execution coordination and management"  
      - "Code quality enforcement and review orchestration"
      - "Cross-functional team collaboration optimization"
      - "React/TypeScript and FastAPI/Python implementation standards"
      - "CI/CD pipeline integration and quality gates"
      - "Technical risk management and issue resolution"
    
    tools: ["Read", "Edit", "MultiEdit", "Bash", "Grep", "Glob", "Task"]
    
    integration_patterns:
      - "Code review process automation and quality gates"
      - "GitHub integration for progress tracking"
      - "Cross-team coordination (frontend/backend/design)"
      - "Continuous integration and automated testing"
    
    success_metrics:
      - "Sprint commitment completion rate ≥95%"
      - "Code quality score ≥8.5/10"
      - "Test coverage ≥85% for new code"
      - "Technical team collaboration ≥4.3/5.0"

  qa-specialist:
    name: "QA Specialist"
    file: "qa-specialist.md"
    sdlc_stage: 5
    priority: "high"
    environment: "production"
    team: "quality"
    
    description: "Quality assurance and testing specialist for SDLC Stage 5. Orchestrates comprehensive testing strategies, automated quality validation, and performance optimization with security compliance verification."
    
    core_capabilities:
      - "Comprehensive testing strategy development and execution"
      - "Automated quality validation and performance testing"
      - "Security testing and compliance verification"
      - "User acceptance testing coordination"
      - "Maritime insurance domain testing patterns"
      - "Quality metrics dashboard and reporting"
    
    tools: ["Read", "Bash", "Grep", "Glob", "Task"]
    
    integration_patterns:
      - "Automated testing pipeline integration"
      - "Performance monitoring and baseline establishment"
      - "Security validation and compliance checking"
      - "Stakeholder UAT coordination and approval"
    
    success_metrics:
      - "Test coverage ≥85% unit, ≥70% integration"
      - "Defect detection rate ≥95%"
      - "Performance benchmark achievement ≥95%"
      - "User acceptance testing approval ≥98%"

  deployment-coordinator:
    name: "Deployment Coordinator"
    file: "deployment-coordinator.md"
    sdlc_stage: 6
    priority: "high"
    environment: "production"
    team: "devops"
    
    description: "Deployment and monitoring specialist for SDLC Stage 6. Manages CI/CD pipeline automation, production deployments, and comprehensive monitoring setup with Sentry integration."
    
    core_capabilities:
      - "Production deployment orchestration and automation"
      - "Zero-downtime deployment strategies"
      - "Comprehensive monitoring and alerting setup"
      - "Rollback procedures and incident response"
      - "AWS infrastructure management and optimization"
      - "Sentry integration for error tracking and performance"
    
    tools: ["Read", "Bash", "Grep", "Glob", "Task"]
    
    integration_patterns:
      - "CI/CD pipeline automation and quality gates"
      - "AWS infrastructure deployment and management"
      - "Sentry monitoring and alerting configuration"
      - "Production performance and availability tracking"
    
    success_metrics:
      - "Deployment success rate ≥99.5%"
      - "Application uptime ≥99.9%"
      - "Mean time to recovery ≤15 minutes"
      - "Zero-downtime deployment achievement ≥95%"

  ai-agent-creator:
    name: "AI Agent Creator"
    file: "ai-agent-creator.md"
    category: "ai-systems"
    priority: "high"
    environment: "production"
    team: "ai-systems"
    
    description: "Specialized in creating new AI agent files following Claude Code best practices, blueprint patterns, and constitutional AI principles. Use when designing new subagents, converting existing patterns to Claude Code format, or implementing agent creation workflows with MCP integration requirements."
    
    core_capabilities:
      - "Blueprint pattern implementation with AI-generated structural patterns"
      - "Claude Code compliance with valid frontmatter properties and automatic delegation optimization"
      - "Constitutional AI integration with 5-level validation framework and ≥95% compliance"
      - "MCP server integration with circuit breaker patterns and error handling"
      - "Quality assurance standards with technical excellence and business domain integration"
      - "Documentation and maintenance with comprehensive agent documentation generation"
    
    tools: ["Read", "Grep", "Glob", "Edit", "Write"]
    
    integration_patterns:
      - "AI-generated blueprint pattern application and structural compliance validation"
      - "Claude Code automatic delegation optimization with keyword-rich descriptions"
      - "Constitutional AI framework integration with multi-level validation standards"
      - "Registry synchronization with cross-reference accuracy and validation framework"
    
    success_metrics:
      - "Agent validation scores ≥75/100"
      - "Constitutional AI compliance ≥95%"
      - "Blueprint pattern compliance 100%"
      - "Production readiness without additional configuration"

  meta-prompt-architect:
    name: "Meta-Prompt Architect"
    file: "meta-prompt-architect.md"
    category: "ai-systems"
    priority: "high"
    environment: "production"
    team: "ai-systems"
    
    description: "Specialized in designing and optimizing meta-prompts using constitutional AI framework, orchestration patterns, and 5-level validation standards. Use when creating complex AI workflow prompts, optimizing existing meta-prompt systems, or implementing advanced reasoning patterns with multi-agent coordination capabilities."
    
    core_capabilities:
      - "Constitutional AI framework design with 5-level validation and ethical alignment"
      - "Orchestration pattern architecture with Queen→Architect→Specialist→Worker hierarchy"
      - "Advanced reasoning method design with tree-of-thoughts and ensemble methodologies"
      - "Research framework integration with 15+ research methods and source discovery"
      - "Quality assurance and validation with multi-level framework and anti-fiction safeguards"
      - "System integration and coordination with existing commands and MCP server patterns"
    
    tools: ["Read", "Grep", "Glob", "Edit", "Write", "WebSearch"]
    
    integration_patterns:
      - "Constitutional AI compliance with accuracy, transparency, and completeness principles"
      - "Multi-agent coordination with Task tool spawning and parallel execution"
      - "Research orchestrator compatibility with automatic intention detection"
      - "Knowledge-vault integration with dual-layer architecture and relationship management"
    
    success_metrics:
      - "Constitutional AI compliance ≥95%"
      - "Orchestration effectiveness score ≥4.5/5.0"
      - "Multi-agent coordination success ≥90%"
      - "System integration compatibility 100%"

  agent-performance-analyzer:
    name: "Agent Performance Analyzer"
    file: "agent-performance-analyzer.md"
    category: "ai-systems"
    priority: "high"
    environment: "production"
    team: "ai-systems"
    
    description: "Specialized in analyzing AI agent effectiveness using multi-level validation framework, usage pattern analysis, and improvement recommendations. Use when optimizing existing agents, conducting performance audits, or implementing systematic agent quality enhancement with measurable outcomes."
    
    core_capabilities:
      - "Multi-level validation framework analysis with 5-level assessment and effectiveness scoring"
      - "Usage pattern and delegation analysis with automatic routing and team collaboration metrics"
      - "Quality assessment and scoring with concreteness framework and constitutional AI compliance"
      - "Performance metrics and analytics with activation time, response latency, and satisfaction tracking"
      - "Improvement recommendation generation with specific enhancement opportunities and impact assessment"
      - "System integration and monitoring with validation tools and registry synchronization"
    
    tools: ["Read", "Grep", "Glob", "Edit", "WebSearch"]
    
    integration_patterns:
      - "Multi-level validation framework with ai-instruction-validator and framework-compliance-validator"
      - "Claude Code delegation analysis with intelligent routing logs and context matching"
      - "Performance tracking with automated metric collection and trend analysis"
      - "Continuous improvement with feedback loops and adaptive optimization systems"
    
    success_metrics:
      - "Performance analysis accuracy ≥90%"
      - "Improvement recommendation effectiveness ≥85%"
      - "Agent optimization success rate ≥80%"
      - "User satisfaction improvement ≥4.2/5.0"

  documentation-synchronizer:
    name: "Documentation Synchronizer"
    file: "documentation-synchronizer.md"
    category: "ai-systems"
    priority: "high"
    environment: "production"
    team: "ai-systems"
    
    description: "Specialized in maintaining documentation consistency across dual-layer architecture, blueprint templates, and multi-source coordination systems with bidirectional Notion synchronization. Use when implementing comprehensive documentation workflows, managing template synchronization, or coordinating multi-platform documentation consistency with quality validation and conflict resolution."
    
    core_capabilities:
      - "Dual-layer architecture synchronization and coordination with file-based and Notion database management"
      - "Blueprint template management and consistency validation with template version control and systematic application"
      - "Multi-platform documentation coordination and quality assurance with cross-platform consistency and validation"
      - "Notion integration excellence and MCP tool coordination with comprehensive API integration and error handling"
      - "Configuration management and operational excellence with synchronization protocols and systematic monitoring"
      - "Quality validation and continuous improvement implementation with constitutional AI compliance and optimization"
    
    tools: ["Read", "Grep", "Glob", "Edit", "Write", "mcp__MCP_DOCKER__API-post-page", "mcp__MCP_DOCKER__API-patch-page", "mcp__MCP_DOCKER__API-retrieve-a-page", "mcp__MCP_DOCKER__API-post-database-query", "mcp__MCP_DOCKER__API-retrieve-a-database"]
    
    integration_patterns:
      - "Documentation synchronization with bidirectional Notion integration and comprehensive conflict resolution"
      - "Template consistency management with blueprint pattern validation and systematic quality enforcement"
      - "Multi-platform coordination with unified content management and systematic integrity verification"
      - "Quality assurance with constitutional AI compliance and comprehensive validation protocols"
    
    success_metrics:
      - "Documentation synchronization accuracy ≥95%"
      - "Template consistency compliance 100%"
      - "Multi-platform coordination effectiveness ≥90%"
      - "Quality validation success rate ≥95%"

  performance-monitoring-agent:
    name: "Performance Monitoring Agent"
    file: "performance-monitoring-agent.md"
    category: "ai-systems"
    priority: "high"
    environment: "production"
    team: "ai-systems"
    
    description: "Specialized in comprehensive performance monitoring, system health analysis, and optimization recommendation generation across multi-agent coordination, research orchestration, and knowledge vault operations. Use when implementing performance tracking systems, analyzing system bottlenecks, or generating optimization strategies with real-time monitoring and alert management."
    
    core_capabilities:
      - "Multi-agent system performance analysis and coordination monitoring with hierarchy efficiency tracking"
      - "Research framework performance monitoring and quality analytics with orchestrator metrics and method analysis"
      - "Knowledge vault and synchronization performance analysis with dual-layer architecture monitoring and Notion integration"
      - "System resource utilization and optimization analysis with computational tracking and API management"
      - "Alert management and proactive issue detection with comprehensive monitoring and escalation protocols"
      - "Performance optimization and continuous improvement implementation with systematic enhancement and benchmarking"
    
    tools: ["Read", "Grep", "Glob", "Edit", "Write", "Bash"]
    
    integration_patterns:
      - "System performance monitoring with real-time metrics collection and comprehensive health assessment"
      - "Multi-agent coordination analysis with spawning efficiency and resource utilization optimization"
      - "Research framework monitoring with method performance tracking and quality outcome measurement"
      - "Alert management with threshold-based monitoring, trend analysis, and systematic escalation protocols"
    
    success_metrics:
      - "System uptime reliability ≥95%"
      - "Performance monitoring accuracy ≥90%"
      - "Alert system effectiveness ≥85%"
      - "Optimization recommendation success ≥80%"

  configuration-management-specialist:
    name: "Configuration Management Specialist"
    file: "configuration-management-specialist.md"
    category: "ai-systems"
    priority: "high"
    environment: "production"
    team: "ai-systems"
    
    description: "Specialized in managing system-wide configuration files, YAML schemas, template synchronization, and configuration validation across the comprehensive AI framework. Use when coordinating complex multi-file configurations, implementing schema validation, or maintaining configuration consistency across multiple subsystems."
    
    core_capabilities:
      - "System-wide configuration management and coordination with centralized validation across 50+ YAML files"
      - "YAML schema validation and quality assurance with automated compliance checking and systematic error detection"
      - "Template and blueprint synchronization excellence with pattern consistency validation and quality standard enforcement"  
      - "Cross-system configuration coordination with unified consistency management and comprehensive conflict resolution"
      - "Configuration optimization and performance enhancement with efficient parsing and systematic resource utilization improvement"
      - "Error detection and systematic remediation with comprehensive configuration error detection and automated recovery protocols"
    
    tools: ["Read", "Grep", "Glob", "Edit", "Write", "MultiEdit"]
    
    integration_patterns:
      - "Configuration synchronization with schema validation, template consistency, and cross-system coordination protocols"
      - "Quality assurance with comprehensive validation, automated compliance checking, and systematic improvement protocols"
      - "Performance optimization with loading efficiency, parsing speed, and systematic resource utilization enhancement"
      - "Error management with automated detection, systematic remediation, and comprehensive quality recovery protocols"
    
    success_metrics:
      - "Configuration validation accuracy ≥95%"
      - "Schema compliance rate 100%"
      - "Template synchronization effectiveness ≥90%"
      - "Error detection and remediation success ≥85%"

  integration-health-monitor:
    name: "Integration Health Monitor"
    file: "integration-health-monitor.md"
    category: "ai-systems"
    priority: "high"
    environment: "production"
    team: "ai-systems"
    
    description: "Specialized in comprehensive MCP server health monitoring, API integration status tracking, and external service reliability management across 15+ MCP servers with authentication monitoring and performance degradation detection. Use when monitoring external integration health, diagnosing API connectivity issues, or maintaining integration reliability with comprehensive error tracking and recovery protocols."
    
    core_capabilities:
      - "MCP server health monitoring and management with comprehensive availability tracking and authentication status validation"
      - "API integration status and performance tracking across GitHub, Notion, JIRA, Docker, AWS, and specialized MCP servers"
      - "External service reliability and quality assurance with uptime monitoring and performance assessment protocols"
      - "Error detection and systematic recovery implementation with MCP error classification and automated recovery protocols"
      - "Integration performance optimization and enhancement with connection pooling and systematic efficiency improvement"
      - "Service coordination and dependency management with cross-service relationship mapping and integration management"
    
    tools: ["Read", "Grep", "Glob", "Edit", "Write", "Bash", "WebSearch"]
    
    integration_patterns:
      - "Comprehensive MCP server monitoring with health checks, authentication validation, and performance tracking"
      - "External service reliability management with uptime monitoring, dependency mapping, and systematic recovery protocols"
      - "Integration performance optimization with connection management, caching strategies, and efficiency enhancement"
      - "Error detection and recovery coordination with automated retry mechanisms and systematic issue resolution"
    
    success_metrics:
      - "MCP server availability ≥98%"
      - "API integration reliability ≥95%"
      - "Error detection accuracy ≥90%"
      - "Recovery protocol effectiveness ≥85%"

# Cross-Stage Integration Patterns
cross_stage_integration:
  stage_1_to_2:
    name: "Requirements to Design Handoff"
    participants: ["requirements-analyst", "ui-ux-specialist", "system-architect"]
    deliverables:
      - "Validated requirements specification"
      - "User personas and journey maps"
      - "Technical architecture constraints"
    quality_gates:
      - "Stakeholder approval ≥95%"
      - "Feasibility validation complete"
      - "JIRA structure created"
  
  stage_2_to_3:
    name: "Design to Planning Handoff"
    participants: ["ui-ux-specialist", "system-architect", "capacity-planner"]
    deliverables:
      - "High-fidelity designs with specifications"
      - "Technical architecture documentation"
      - "Implementation complexity assessment"
    quality_gates:
      - "Design system compliance ≥95%"
      - "Architecture approval documented"
      - "Technical feasibility confirmed"
  
  stage_3_to_4:
    name: "Planning to Implementation Handoff"
    participants: ["capacity-planner", "implementation-lead"]
    deliverables:
      - "Sprint plan with task assignments"
      - "Team capacity allocation"
      - "Development environment setup"
    quality_gates:
      - "Sprint plan approved"
      - "Capacity validated"
      - "Team alignment confirmed"
  
  stage_4_to_5:
    name: "Implementation to Testing Handoff"
    participants: ["implementation-lead", "qa-specialist"]
    deliverables:
      - "Feature implementation complete"
      - "Code review approved"
      - "Integration testing passed"
    quality_gates:
      - "Feature completion verified"
      - "Code quality standards met"
      - "Integration issues resolved"
  
  stage_5_to_6:
    name: "Testing to Deployment Handoff"
    participants: ["qa-specialist", "deployment-coordinator"]
    deliverables:
      - "Quality certification complete"
      - "Performance baselines established"
      - "Security validation passed"
    quality_gates:
      - "All testing phases passed"
      - "Performance benchmarks met"
      - "Security compliance verified"

# Usage Patterns
usage_patterns:
  individual_subagent:
    description: "Activate single subagent for specific SDLC stage work"
    command_pattern: "Task with specific subagent and stage context"
    use_cases:
      - "Requirements analysis for new feature"
      - "UI/UX design for specific workflow"
      - "Capacity planning for upcoming sprint"
  
  stage_coordination:
    description: "Coordinate multiple subagents within single SDLC stage"
    command_pattern: "/sdlc-orchestrate [stage] [deliverable]"
    use_cases:
      - "Design stage with UI/UX and architecture coordination"
      - "Cross-functional implementation coordination"
      - "Comprehensive testing and quality validation"
  
  full_workflow:
    description: "Complete 6-stage SDLC workflow orchestration"
    command_pattern: "/sdlc-orchestrate workflow [feature-name]"
    use_cases:
      - "End-to-end feature development lifecycle"
      - "New product capability development"
      - "Major system integration projects"
  
  cross_stage_transitions:
    description: "Manage stage transitions and quality gates"
    command_pattern: "/sdlc-orchestrate cross-stage [transition]"
    use_cases:
      - "Requirements to design transition validation"
      - "Implementation to testing handoff coordination"
      - "Quality gate compliance verification"

# Integration with Existing Commands
command_integration:
  sdlc_validate_pr:
    file: ".claude/commands/sdlc-validate-pr.md"
    purpose: "SDLC-enhanced PR validation with stage-specific quality gates"
    integration: "Automatically detects and activates relevant SDLC subagents based on PR content"
    
  sdlc_orchestrate:
    file: ".claude/commands/sdlc-orchestrate.md"
    purpose: "SDLC-aware agent orchestration for workflow coordination"
    integration: "Orchestrates subagents across stages with dependency management"

# Shared Resources
shared_resources:
  instruction_libraries:
    - "security-validation-core.md": "OWASP Top 10 compliance and security patterns"
    - "code-review-criteria.md": "Code quality standards and review guidelines"
    - "orchestration-patterns.md": "Multi-agent coordination and result aggregation"
    - "mcp-integration-patterns.md": "WorkOS, JIRA, and Sentry integration workflows"
  
  integration_tools:
    - "WorkOS": "Authentication and organization management"
    - "JIRA": "Project management and sprint automation"
    - "Sentry": "Error tracking and performance monitoring"

# Maritime Insurance Domain Expertise
domain_expertise:
  regulatory_compliance:
    - "Lloyd's of London standards and practices"
    - "IMO (International Maritime Organization) requirements"
    - "Maritime insurance regulatory compliance"
    - "Data privacy and security requirements (GDPR)"
  
  business_processes:
    - "Policy underwriting and risk assessment workflows"
    - "Claims processing and settlement procedures"
    - "Vessel inspection and survey requirements"
    - "Premium calculation and actuarial analysis"
  
  technical_requirements:
    - "High availability and disaster recovery"
    - "Financial calculation accuracy and precision"
    - "Audit logging and compliance reporting"
    - "Integration with maritime data providers"

# Quality Standards
quality_standards:
  code_quality:
    - "TypeScript strict mode with comprehensive typing"
    - "Python PEP compliance with Black/Ruff formatting"
    - "Test coverage ≥85% unit, ≥70% integration"
    - "Security vulnerability count = 0 critical"
  
  documentation:
    - "Comprehensive API documentation with OpenAPI"
    - "Component documentation with usage examples"
    - "Architecture decision records (ADRs)"
    - "Deployment and operational runbooks"
  
  performance:
    - "API response time ≤500ms (95th percentile)"
    - "Frontend load times ≤2 seconds"
    - "Database query performance ≤100ms average"
    - "Application availability ≥99.9%"

# Version History
version_history:
  v1.0.0:
    date: "2025-01-28"
    changes:
      - "Initial release with 7 specialized SDLC subagents"
      - "Complete 6-stage SDLC workflow coverage"
      - "Maritime insurance domain expertise integration"
      - "WorkOS, JIRA, and Sentry integration patterns"
  
  v1.1.0:
    date: "2025-01-29"
    changes:
      - "Added 3 Phase 1 AI systems enhancement subagents"
      - "AI Agent Creator for systematic agent creation following best practices"
      - "Meta-Prompt Architect for constitutional AI framework and orchestration design"
      - "Agent Performance Analyzer for effectiveness measurement and optimization"
      - "Enhanced registry with ai-systems category and comprehensive capability documentation"
  
  v1.2.0:
    date: "2025-01-29"
    changes:
      - "Added 6 Phase 2 & 3 AI systems enhancement subagents (total: 16 subagents)"
      - "Phase 2: Coordination Pattern Optimizer for multi-agent hierarchy optimization"
      - "Phase 2: Knowledge Extraction Specialist for dual-layer architecture and Notion synchronization"
      - "Phase 2: Research Method Developer for advanced research methodology creation"
      - "Phase 3: Source Discovery Specialist for intelligent source coordination and MCP integration"
      - "Phase 3: Documentation Synchronizer for multi-platform documentation consistency"
      - "Phase 3: Performance Monitoring Agent for comprehensive system health and optimization"
      - "Complete AI systems enhancement framework with constitutional AI compliance ≥95%"
  
  v1.3.0:
    date: "2025-01-29"
    changes:
      - "REMEDIATION: Removed 5 redundant subagents after overlap analysis (total: 11 subagents)"
      - "Removed: coordination-pattern-optimizer (overlaps with orchestrate-agents command)"
      - "Removed: knowledge-extraction-specialist (overlaps with knowledge-vault-manager)"
      - "Removed: research-method-developer (overlaps with research-specialist + research command)"
      - "Removed: source-discovery-specialist (overlaps with information-access-specialist)"
      - "Removed: agent-performance-analyzer (overlaps with validation-framework command)"
      - "Retained 4 legitimate new agents: ai-agent-creator, meta-prompt-architect, documentation-synchronizer, performance-monitoring-agent"
      - "Focus shift to truly unique functionality without duplicating existing capabilities"
  
  v1.4.0:
    date: "2025-01-29"
    changes:
      - "Added 2 specialized maintenance agents addressing real system gaps (total: 13 subagents)"
      - "Configuration Management Specialist: System-wide YAML configuration management across 50+ files with schema validation"
      - "Integration Health Monitor: Comprehensive MCP server health monitoring across 15+ servers with API reliability tracking"
      - "Completed gap analysis ensuring all new agents provide unique, non-overlapping functionality"
      - "Final registry consolidation with comprehensive documentation and success metrics"